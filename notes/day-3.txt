1. service and dependency injection
		a. how to create a service
		b. how to register a service
			 - Injector
			 - provider
		c. how to consume a service
		d. how to create token-based custom service provider and @Inject() decorator
		e. role of interface for loose coupling
		f. @Injectable() decorator for service (*)

2. structural directives
		- *ngIf, *ngFor, *ngSwitch

3. Pipe
		a. using built-in pipes: uppercase, lowercase, currency, symbol, async
		b. create custom pipe

4. component lifecycle

5. passing data between components:
		a. passing data between parent and nested
		b. passing data between tow routed components (navigation from one to another component)
		c. passing data between any two components (rxjs)

6. Making HTTP requests
		- HttpClientModule [@angular/common/http]
		- HttpClient service class [@angular/common/http] and its methods get(), post() etc..
		- Observable, Observer, Subscription etc.

7. Forms
		- template driven form
		- Reactive Form



URL											METHOD	ROUTE/REQ DATA			RETURNS
http://127.0.0.1:3003/products		GET			---					{ message: "", data:[{},{}]}
http://127.0.0.1:3003/products/{id}	GET			product id			{ message: "", data:{} }
																						{ message: "", data:null }
http://127.0.0.1:3003/products/{id}	DELETE		product id			{ message: "", data:[{}..]}
																						{ message: "", data:null }

http://127.0.0.1:3003/products		POST			product object		{ message: "", data:[{},{}]}
																						{ message: "", data:null }

http://127.0.0.1:3003/products/{id}	PUT		product id and object{ message: "", data:[{},{}]}
																						{ message: "", data:null }
product:

	productId:number, 
	productName:string, 
	price:number, 
	description:string, 
	productCode:string, 
	imageUrl:string, 
	starRating:number, 
	releaseDate:string
	
	categoryId:number,
	category:Category

category:
	categoryid:
	categoryname:string
	products:category[]

pms-app structure:

	app
		app.component.ts
		app.component.html
		app.component.css
		app.module.ts

		feature-modules
			products
				products.module.ts
				components
					product-list
						product-list.component.ts
						product-list.component.html
						product-list.component.css

					product-view
						product-view.component.ts
						product-view.component.html
						product-view.component.css

				services
						product.service.ts

				pipes
						pipe-name.pipe.ts

				directives
						dir-name.directive.ts
			
			orders

			cart

			payments


@Injectable(): every entity in angular which requires dependency injection of some service, must be decorated with @Injectable()
since, components, directives, pipes, modules all use one or the other decorator, they all implement @Injectable() decorator by default
in case of service, you should use that decorator explicitly


component lifecycle:
	1. creation:
			a. constructor
			b. changes
			c. init

	2. changes

	3. destruction:
			destroy

event-name interface method
X				OnX		ngOnX


		
	








