promise
rxjs - observable, observer, operators, subject etc.

angular assets:					decorator functions:				package
	component: class 			@Component()							@angular/core
	directive: class			@Directive()							@angular/core
	pipe: class					@Pipe()									@angular/core		

	service: class				@Injectable()							@angular/core
					
	module: class					@NgModule()							@angular/core

Binding:
	passing data between code and view and vice versa
a. data binding:
	passing data from code to view
	syntaxes:
		template: {{property-of-the-class}} => interpolation
		template: <element-name [atr-name]="property-of-the-class"> => property binding

b. event binding:
	passing data from view to the component code
   syntax:
		template: <element-name (event-name)="method-of-the-class()">

	element				property
	-----------------------------
	h2						title

directive:
	a. component directive: a directive with view (@Component())
	b. attribute directive: they are used like an attribute with any existing element and extend the behavior of that element
	c. structural directive: used to manipulate the dom elements

@Directive({
	selector:'[ngModel]'
})
export class NgModelDirective{
	
}

@NgModule({
	declarations:[NgModelDirective],
	exports:[NgModelDirective]
})
export class FormsModule{
}



interface Directive{}
interface Component extends Directive{}


services:
provider:
injector: create instance of service, maintain it in a container and supply that to any other asset

service instances:
	asset level: a dedicated instance for an asset (register at the asset)
	feature module level: an instance for all assets of a feature module (register at the feature module level)
	root module level: a singelton instance for entire application (register at the root module level - app.module.ts)




	

